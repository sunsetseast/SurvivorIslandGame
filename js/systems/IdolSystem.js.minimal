// Idol System - Minimal version with fixed JSON issues
class IdolSystem {
    constructor(gameManager) {
        this.gameManager = gameManager;
        this.idolsInPlay = 0;
        this.maxIdols = 2;
        this.idolLocation = null;
        this.searchedSpots = new Set();
    }
    
    initialize() {
        this.idolsInPlay = 0;
        this.resetIdolLocations();
    }
    
    resetIdolLocations() {
        this.searchedSpots.clear();
        
        const locations = ["Beach", "Jungle", "Camp", "Private Area"];
        const selectedLocation = locations[Math.floor(Math.random() * locations.length)];
        
        const hidingSpots = this.getLocationHidingSpots(selectedLocation);
        
        if (!hidingSpots || hidingSpots.length === 0) {
            console.error("No hiding spots found for location:", selectedLocation);
            return;
        }
        
        const randomSpot = hidingSpots[Math.floor(Math.random() * hidingSpots.length)];
        
        this.idolLocation = {
            location: selectedLocation,
            hidingSpot: randomSpot
        };
        
        // Safer logging without JSON
        console.log("Idol hidden at location:", selectedLocation);
        console.log("Idol hidden at hiding spot:", randomSpot);
    }
    
    showIdolSearch() {
        console.log("showIdolSearch called. idolsInPlay:", this.idolsInPlay, "maxIdols:", this.maxIdols);
        
        if (this.idolLocation) {
            console.log("Current idol location:", this.idolLocation.location);
            console.log("Current idol hiding spot:", this.idolLocation.hidingSpot);
        } else {
            console.log("No idol location set");
        }
        
        if (this.idolsInPlay >= this.maxIdols) {
            this.gameManager.dialogueSystem.showDialogue(
                "You search around but don't find any hidden immunity idols.",
                ["Continue"],
                () => this.gameManager.dialogueSystem.hideDialogue()
            );
            return;
        }
        
        // For now, just a simple message since we're focusing on fixing the bug
        this.gameManager.dialogueSystem.showDialogue(
            "You search for a hidden immunity idol...",
            ["Continue searching"],
            () => {
                if (Math.random() < 0.1) {  // 10% chance of finding
                    this.givePlayerIdol();
                } else {
                    this.gameManager.dialogueSystem.showDialogue(
                        "You search but don't find anything this time.",
                        ["Continue"],
                        () => this.gameManager.dialogueSystem.hideDialogue()
                    );
                }
            }
        );
    }
    
    getLocationHidingSpots(locationName) {
        switch(locationName) {
            case "Beach":
                return [
                    "under a pile of shells",
                    "inside a small tidal cave",
                    "buried in the sand",
                    "in a coconut shell",
                    "behind a large rock",
                    "in a hollowed tree stump"
                ];
            case "Jungle":
                return [
                    "inside a hollow tree",
                    "under a large boulder",
                    "in a dense thicket",
                    "high up in a tree",
                    "in a small stream",
                    "under a pile of fallen leaves"
                ];
            case "Camp":
                return [
                    "under the shelter",
                    "buried near the tribe flag",
                    "inside the water well",
                    "in the firewood pile",
                    "underneath the tribe bench",
                    "inside a pot or container"
                ];
            case "Private Area":
                return [
                    "inside a small cave",
                    "under a distinctive rock",
                    "buried at the base of a dead tree",
                    "in a bird's nest",
                    "under a pile of stones",
                    "wedged in a tree branch"
                ];
            default:
                return [
                    "under a rock",
                    "in a tree",
                    "buried in the ground",
                    "inside a hollow log",
                    "behind vegetation",
                    "near the water"
                ];
        }
    }
    
    startIdolSearch(hidingSpot) {
        // Simplified for bug fixing
        console.log("Searching for idol at spot:", hidingSpot);
        
        if (Math.random() < 0.1) {  // 10% chance of finding
            this.givePlayerIdol();
        } else {
            this.gameManager.dialogueSystem.showDialogue(
                "You search but don't find anything this time.",
                ["Continue"],
                () => this.gameManager.dialogueSystem.hideDialogue()
            );
        }
    }
    
    givePlayerIdol() {
        const playerSurvivor = this.gameManager.getPlayerSurvivor();
        
        if (playerSurvivor) {
            playerSurvivor.hasIdol = true;
            this.idolsInPlay++;
            
            this.gameManager.dialogueSystem.showDialogue(
                "You found a Hidden Immunity Idol! You can play this at Tribal Council to protect yourself from being voted out.",
                ["Awesome!"],
                () => this.gameManager.dialogueSystem.hideDialogue()
            );
        }
    }
    
    processNPCIdolFinds() {
        if (this.idolsInPlay >= this.maxIdols) return;
        
        const survivors = [];
        this.gameManager.getTribes().forEach(tribe => {
            tribe.members.forEach(member => {
                if (!member.isPlayer && !member.hasIdol) {
                    survivors.push(member);
                }
            });
        });
        
        if (Math.random() < 0.05 && survivors.length > 0) {
            const luckyFinder = survivors[Math.floor(Math.random() * survivors.length)];
            luckyFinder.hasIdol = true;
            this.idolsInPlay++;
            
            this.gameManager.dialogueSystem.showDialogue(
                `You notice ${luckyFinder.name} searching around camp and looking suspicious. They might have found something interesting.`,
                ["Interesting..."],
                () => this.gameManager.dialogueSystem.hideDialogue()
            );
        }
    }
    
    resetIdol(survivor) {
        if (survivor && survivor.hasIdol) {
            survivor.hasIdol = false;
            this.idolsInPlay--;
            this.resetIdolLocations();
            console.log("Idol played. New idol location generated.");
        }
    }
    
    getIdolsInPlay() {
        let count = 0;
        
        this.gameManager.getTribes().forEach(tribe => {
            tribe.members.forEach(member => {
                if (member.hasIdol) {
                    count++;
                }
            });
        });
        
        this.idolsInPlay = count;
        return count;
    }
    
    getSurvivorsWithIdols() {
        const survivorsWithIdols = [];
        
        console.log("Checking for survivors with idols...");
        
        this.gameManager.getTribes().forEach(tribe => {
            console.log("Checking tribe", tribe.tribeName, "with", tribe.members.length, "members");
            
            tribe.members.forEach(member => {
                console.log("Checking member", member.name, "hasIdol:", member.hasIdol);
                if (member.hasIdol) {
                    survivorsWithIdols.push(member);
                    console.log("Added", member.name, "to idol holders list");
                }
            });
        });
        
        console.log("Found", survivorsWithIdols.length, "survivors with idols");
        return survivorsWithIdols;
    }
}